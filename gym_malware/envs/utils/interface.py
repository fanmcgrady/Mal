import glob
import os
import sys

module_path = os.path.dirname(os.path.abspath(sys.modules[__name__].__file__))

SAMPLE_PATH = os.path.join(module_path, 'samples')
TEST_SAMPLE_PATH = os.path.join(module_path, 'test_samples')
EVADED_SAMPLE_PATH = os.path.join(module_path, '../../../evaded/blackbox')

class ClassificationFailure(Exception):
    def __init__(self, message, status):
        super().__init__(message, status)
        self.message = message
        self.status = status


# 获取文件二进制数据
def fetch_file(sha256, test=False):
    root = SAMPLE_PATH if not test else TEST_SAMPLE_PATH
    location = os.path.join(root, sha256)
    try:
        with open(location, 'rb') as infile:
            bytez = infile.read()
    except IOError:
        raise FileNotFoundError(
            "Unable to read sha256 from {}".format(location))

    return bytez

# 在samples目录中读取样本，放入list返回
def get_samples():
    sha256list = []
    for fp in glob.glob(os.path.join(SAMPLE_PATH, '*')):
        fn = os.path.split(fp)[-1]
        # result = re.match(r'^[0-9a-fA-F]{64}$', fn) # require filenames to be sha256
        # if result:
        #     sha256list.append(result.group(0))
        sha256list.append(fn)
    assert len(sha256list) > 0, "no files found in {} with sha256 names".format(SAMPLE_PATH)
    return sha256list

def get_label_local():
    pass

def main():
    list = get_samples()
    for l in list:
        print(fetch_file(l))

if __name__ == '__main__':
    main()

import ctypes
import json
import os
import random
import sqlite3
import subprocess
import sys
import time

import pyclamd
from config import *

# 运行前启动clamd.exe
from gym_malware.envs.utils.engine import Engine


module_path = os.path.abspath(os.path.dirname(os.path.dirname(os.path.dirname(os.path.dirname(__file__)))))
this_path =  os.path.abspath(os.path.dirname(__file__))
# clamav
class ClamAV(Engine):
    def __init__(self):
        self.cd = pyclamd.ClamdAgnostic()
        super().__init__()

    def scan(self, sample):
        if type(sample) == bytes:
            result = self.cd.scan_stream(sample)
        else:
            result = self.cd.scan_file(sample)
        # print(result)
        return 0 if result == None else 1

# windows defender
class Microsoft(Engine):
    def __init__(self):
        self.detector_path = "%ProgramFiles%\\Windows Defender"
        super().__init__()

    def scan(self, path):
       try:
            command = '"' + self.detector_path + '\\MpCmdRun.exe" -Scan -ScanType 3 -File "' + path + '" -DisableRemediation'
            result = subprocess.getoutput(command)
            print(result)
            return self.__parse(result)
       except:
           return "检测失败"

    def __parse(self, result):
        return 0 if "found no threats" in result else 1

# Kaspersky
class Kaspersky(Engine):
    def __init__(self):
        self.detector_path = "C:\\Program Files (x86)\\Kaspersky Lab\\Kaspersky Free 21.3"
        super().__init__()

    def scan(self, path):
        try:
            command = '"' + self.detector_path + '\\avp.com" scan /i0 ' + '"' + path + '"'
            result = subprocess.getoutput(command)
            return self.__parse(result)
        except:
            return "检测失败"

    def __parse(self, result):
        return 0 if "Total OK:	1" in result else 1

# 火绒
class HuoRong(Engine):
    def __init__(self):
        # 加载窗口处理dll
        pDLL = None
        try:
            pDLL = ctypes.WinDLL(r"lib\huorong.dll")
        except:
            try:
                pDLL = ctypes.WinDLL(r"lib\huorong_64.dll")
            except:
                print("Load Native Library Error.")
        self.getHandle = pDLL.getHandle
        self.click = pDLL.click

        super().__init__()

    def scan(self, path):
        class LogDB:
            def __init__(self):
                self.db = sqlite3.connect(r"C:\ProgramData\Huorong\Sysdiag\log.db")

            def get_current_id(self):
                return self.db.execute("select max(id) from HrLogV3 where fname='scan'").fetchone()[0]

            def get_detail_by_id(self, id):
                return self.db.execute("select detail from HrLogV3 where id = {}".format(id)).fetchone()[0]

        try:
            self.log_db = LogDB()
            current_id = self.log_db.get_current_id()
            command = "\"C:\Program Files (x86)\Huorong\Sysdiag\\bin\HipsMain.exe\" -s {}".format(path)
            subprocess.Popen(command, shell=True, stdout=subprocess.PIPE, stderr=subprocess.STDOUT)
            while True:
                handle = self.getHandle()
                if handle != -1:
                    break
            while True:
                self.click(handle, 655, 40)
                next_id = self.log_db.get_current_id()
                if next_id != current_id:
                    break
                time.sleep(0.5)
            result = self.log_db.get_detail_by_id(next_id)
            return self.__parse(result)
        except:
            return "检测失败"

    def __parse(self, result):
        return 0 if json.loads(result)["detail"]["threats"] == 0 else 1

def label_function(engine, sample):
    fname = '{}.exe'.format(random.random())
    with open(fname, "wb") as f:  # 写文件时指定模式为"b"
        f.write(sample)
    fpath = os.path.join(module_path, fname)
    result = engine.scan(fpath)
    with open(LOG_PATH+r"\log.txt", "a+") as f:
        f.write("detected as {}\n".format("mal" if result==1 else "benign"))
    os.remove(fpath)
    return result

def test_label_function(engine, sample):
    fname = '{}.exe'.format(random.random())
    with open(fname, "wb") as f:  # 写文件时指定模式为"b"
        f.write(sample)
    fpath = os.path.join(this_path, fname)
    result = engine.scan(fpath)
    os.remove(fpath)
    return result

if __name__ == '__main__':
    ca = ClamAV()
    sample_path = MAL_SAMPLE_PATH
    with open(sample_path, 'rb') as sp:
        sample = sp.read()
    print(test_label_function(ca, sample))
    # defender = Microsoft()
    # print(defender.scan(r'd:/samples/rootkit/Rootkit.Win32.Agent.acq'))


